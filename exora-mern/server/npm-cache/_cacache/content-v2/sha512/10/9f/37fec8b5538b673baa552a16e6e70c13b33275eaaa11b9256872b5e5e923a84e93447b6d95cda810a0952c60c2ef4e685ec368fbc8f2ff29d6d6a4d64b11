{"_id":"expr-eval","_rev":"22-abadf89a9f51430ac8eeff6aa1c6654f","name":"expr-eval","description":"Mathematical expression evaluator","dist-tags":{"latest":"2.0.2"},"versions":{"0.9.0":{"name":"expr-eval","version":"0.9.0","description":"Mathematical expression evaluator","main":"parser.js","directories":{"test":"test"},"dependencies":{},"devDependencies":{"chai":"^3.5.0","eslint":"^3.4.0","eslint-config-semistandard":"^7.0.0-beta.0","eslint-config-standard":"^6.0.0","eslint-plugin-promise":"^2.0.1","eslint-plugin-standard":"^2.0.0","mocha":"^2.5.3"},"scripts":{"test":"mocha","lint":"eslint ."},"repository":{"type":"git","url":"git+https://github.com/silentmatt/expr-eval.git"},"keywords":["expression","math","evaluate","eval","function","parser"],"author":{"name":"Matthew Crumley"},"license":"MIT","bugs":{"url":"https://github.com/silentmatt/expr-eval/issues"},"homepage":"https://github.com/silentmatt/expr-eval#readme","gitHead":"58d6cecef068e8222a33df948a2088e7a016e2a3","_id":"expr-eval@0.9.0","_shasum":"4a2a38d147a1934e9a0391bec422721b4582d514","_from":".","_npmVersion":"3.5.2","_nodeVersion":"4.2.6","_npmUser":{"name":"silentmatt","email":"email@matthewcrumley.com"},"dist":{"shasum":"4a2a38d147a1934e9a0391bec422721b4582d514","tarball":"https://registry.npmjs.org/expr-eval/-/expr-eval-0.9.0.tgz","integrity":"sha512-+tk48GeEKnpgjNAg4ePDePndDJZsY/OCYnqDRUh/6/oFfjfKhI0LSlIiJDAK/lTH0ikaEGlDK/wnix4PVBoB3Q==","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEYCIQDq/tEt5RGUlgmDT2741iYiC0qVPyD0vvqTYPJ8YVHUiwIhAL5Xj65l3xf0MaFfPfWUYwfVtV+Fg2D/ef/MLAM8ebA+"}]},"maintainers":[{"name":"silentmatt","email":"email@matthewcrumley.com"}],"_npmOperationalInternal":{"host":"packages-16-east.internal.npmjs.com","tmp":"tmp/expr-eval-0.9.0.tgz_1473824043442_0.3888529217801988"}},"0.10.0":{"name":"expr-eval","version":"0.10.0","description":"Mathematical expression evaluator","main":"dist/bundle.js","directories":{"test":"test"},"dependencies":{},"devDependencies":{"chai":"^3.5.0","eslint":"^3.4.0","eslint-config-semistandard":"^7.0.0-beta.0","eslint-config-standard":"^6.0.0","eslint-plugin-promise":"^2.0.1","eslint-plugin-standard":"^2.0.0","mocha":"^2.5.3","rollup":"^0.36.0"},"scripts":{"test":"npm run build && mocha","lint":"eslint parser.js test","build":"rollup parser.js --format=umd --name=exprEval --output=dist/bundle.js","prepublish":"npm run build"},"files":["dist/"],"repository":{"type":"git","url":"git+https://github.com/silentmatt/expr-eval.git"},"keywords":["expression","math","evaluate","eval","function","parser"],"author":{"name":"Matthew Crumley"},"license":"MIT","bugs":{"url":"https://github.com/silentmatt/expr-eval/issues"},"homepage":"https://github.com/silentmatt/expr-eval#readme","gitHead":"416853f3fd8be5419bf1ecdaffbd6633d40576a8","_id":"expr-eval@0.10.0","_shasum":"0be791d709c18f903d43036867157c5cee2d6c39","_from":".","_npmVersion":"3.5.2","_nodeVersion":"4.2.6","_npmUser":{"name":"silentmatt","email":"email@matthewcrumley.com"},"dist":{"shasum":"0be791d709c18f903d43036867157c5cee2d6c39","tarball":"https://registry.npmjs.org/expr-eval/-/expr-eval-0.10.0.tgz","integrity":"sha512-pH+eyChWzQnrs6LsiY0GcB/SBhMtch6AbMw72H/yrwJ6TXDTjwSOxPE+0TKqnkdZXQu8YWnXcRhghIrM7RXo2w==","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIQDn+XsfnC9Ab6kheJqRM1iFYoKEX++duSYzjHEBIeyNtwIgXUtZ0odC3oKHT7SNHihTPN3Nxyq2uuWe3cLoj9swg84="}]},"maintainers":[{"name":"silentmatt","email":"email@matthewcrumley.com"}],"_npmOperationalInternal":{"host":"packages-16-east.internal.npmjs.com","tmp":"tmp/expr-eval-0.10.0.tgz_1475124798523_0.9397801468148828"}},"0.10.1":{"name":"expr-eval","version":"0.10.1","description":"Mathematical expression evaluator","main":"dist/bundle.js","directories":{"test":"test"},"dependencies":{},"devDependencies":{"chai":"^3.5.0","eslint":"^3.4.0","eslint-config-semistandard":"^7.0.0-beta.0","eslint-config-standard":"^6.0.0","eslint-plugin-promise":"^2.0.1","eslint-plugin-standard":"^2.0.0","mocha":"^2.5.3","rollup":"^0.36.0"},"scripts":{"test":"npm run build && mocha","lint":"eslint parser.js test","build":"rollup parser.js --format=umd --name=exprEval --output=dist/bundle.js","prepublish":"npm run build"},"files":["dist/"],"repository":{"type":"git","url":"git+https://github.com/silentmatt/expr-eval.git"},"keywords":["expression","math","evaluate","eval","function","parser"],"author":{"name":"Matthew Crumley"},"license":"MIT","bugs":{"url":"https://github.com/silentmatt/expr-eval/issues"},"homepage":"https://github.com/silentmatt/expr-eval#readme","gitHead":"7297a56fd2b1e49df8a5bd1492b982648b8f7b19","_id":"expr-eval@0.10.1","_shasum":"c009aee50bdc807f3d4437575b99a7761a8f723a","_from":".","_npmVersion":"3.5.2","_nodeVersion":"4.2.6","_npmUser":{"name":"silentmatt","email":"email@matthewcrumley.com"},"dist":{"shasum":"c009aee50bdc807f3d4437575b99a7761a8f723a","tarball":"https://registry.npmjs.org/expr-eval/-/expr-eval-0.10.1.tgz","integrity":"sha512-Vq+s8Oq3y9UMhkcOKr9Kjmhbm2lpZqqDGLp4EoR1JGWMyd11caSZ/SfnhjdYrr36uPKC7uweXufxMoxc3Y3R+Q==","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEQCIBlCAG6tFhhSB9xwA4PxF0MCfSGM42l5/JoHtz6D+cYWAiBafOpk3YGCA6SxtJdOXkpGNzAnn6OvZkngJIwOOoLFpg=="}]},"maintainers":[{"name":"silentmatt","email":"email@matthewcrumley.com"}],"_npmOperationalInternal":{"host":"packages-12-west.internal.npmjs.com","tmp":"tmp/expr-eval-0.10.1.tgz_1475443450408_0.7988066470716149"}},"0.12.0":{"name":"expr-eval","version":"0.12.0","description":"Mathematical expression evaluator","main":"dist/bundle.js","directories":{"test":"test"},"dependencies":{},"devDependencies":{"chai":"^3.5.0","eslint":"^3.4.0","eslint-config-semistandard":"^7.0.0-beta.0","eslint-config-standard":"^6.0.0","eslint-plugin-promise":"^2.0.1","eslint-plugin-standard":"^2.0.0","istanbul":"^0.4.5","mocha":"^3.1.0","rollup":"^0.36.0"},"scripts":{"test":"npm run build && mocha","coverage":"npm run build && istanbul cover _mocha","lint":"eslint parser.js test","build":"rollup parser.js --format=umd --name=exprEval --output=dist/bundle.js","prepublish":"npm run build"},"files":["dist/"],"repository":{"type":"git","url":"git+https://github.com/silentmatt/expr-eval.git"},"keywords":["expression","math","evaluate","eval","function","parser"],"author":{"name":"Matthew Crumley"},"license":"MIT","bugs":{"url":"https://github.com/silentmatt/expr-eval/issues"},"homepage":"https://github.com/silentmatt/expr-eval#readme","gitHead":"92ed7405cae44a1cf839ee9437a3444c818d91b6","_id":"expr-eval@0.12.0","_shasum":"129ed36e73bf86e04786952fc746ba63b58e2e6b","_from":".","_npmVersion":"3.5.2","_nodeVersion":"4.2.6","_npmUser":{"name":"silentmatt","email":"email@matthewcrumley.com"},"dist":{"shasum":"129ed36e73bf86e04786952fc746ba63b58e2e6b","tarball":"https://registry.npmjs.org/expr-eval/-/expr-eval-0.12.0.tgz","integrity":"sha512-ByTATDlF3teuwOOBtXNRvZav3W92j3fsCd6JaDMx0WHHPsWVFbOvTbMe0YlIzovNOOqUhgVkKwfva+YQRvnV7Q==","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEYCIQDDiJGIHPnD8TRIaao3gJSjLLZ+EK3e523K0K44pmvR6QIhAMPgoYMKE78lLFTfAd69w/0d0QMdBJpuybYDOs2HHpH8"}]},"maintainers":[{"name":"silentmatt","email":"email@matthewcrumley.com"}],"_npmOperationalInternal":{"host":"packages-12-west.internal.npmjs.com","tmp":"tmp/expr-eval-0.12.0.tgz_1476337411445_0.6743396252859384"}},"1.0.0-rc.3":{"name":"expr-eval","version":"1.0.0-rc.3","description":"Mathematical expression evaluator","main":"dist/bundle.js","directories":{"test":"test"},"dependencies":{},"devDependencies":{"chai":"^3.5.0","eslint":"^3.4.0","eslint-config-semistandard":"^7.0.0-beta.0","eslint-config-standard":"^6.0.0","eslint-plugin-promise":"^3.3.1","eslint-plugin-standard":"^2.0.0","istanbul":"^0.4.5","mocha":"^3.1.0","rollup":"^0.36.0","rollup-plugin-uglify":"^1.0.1"},"scripts":{"test":"npm run build && mocha","coverage":"npm run build && istanbul cover _mocha","lint":"eslint parser.js test rollup.config.js rollup-min.config.js","build":"rollup -c rollup.config.js && rollup -c rollup-min.config.js","prepublish":"npm run build"},"files":["dist/"],"repository":{"type":"git","url":"git+https://github.com/silentmatt/expr-eval.git"},"keywords":["expression","math","evaluate","eval","function","parser"],"author":{"name":"Matthew Crumley"},"license":"MIT","bugs":{"url":"https://github.com/silentmatt/expr-eval/issues"},"homepage":"https://github.com/silentmatt/expr-eval#readme","gitHead":"513c2cadf650c81ca41f49124a0dfea7f71b77e6","_id":"expr-eval@1.0.0-rc.3","_shasum":"846a82bc187bb95063f55d22ef0b3de142697bb8","_from":".","_npmVersion":"3.5.2","_nodeVersion":"4.2.6","_npmUser":{"name":"silentmatt","email":"email@matthewcrumley.com"},"dist":{"shasum":"846a82bc187bb95063f55d22ef0b3de142697bb8","tarball":"https://registry.npmjs.org/expr-eval/-/expr-eval-1.0.0-rc.3.tgz","integrity":"sha512-8WEcVsJn/NdrXHuuZDa/dXzj8bqZGgZ/Hq7/M3E7W3KYOtzW8ZdQ80J+bozLgFA+Hb1GGC/ZA6Vh4hU2oPDUxg==","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEQCIBdfmyNSUxgx2YFgr4eJ6N3BHpmwiBomzT3oLI4i2MZEAiAhSMhocd8hT8XPPuKedQQvJLyvynorrw3dmguAAlfeEw=="}]},"maintainers":[{"name":"silentmatt","email":"email@matthewcrumley.com"}],"_npmOperationalInternal":{"host":"packages-18-east.internal.npmjs.com","tmp":"tmp/expr-eval-1.0.0-rc.3.tgz_1480366004650_0.6059744502417743"}},"1.0.0-rc.4":{"name":"expr-eval","version":"1.0.0-rc.4","description":"Mathematical expression evaluator","main":"dist/bundle.js","directories":{"test":"test"},"dependencies":{},"devDependencies":{"chai":"^3.5.0","eslint":"^3.4.0","eslint-config-semistandard":"^7.0.0-beta.0","eslint-config-standard":"^6.0.0","eslint-plugin-promise":"^3.3.1","eslint-plugin-standard":"^2.0.0","istanbul":"^0.4.5","mocha":"^3.1.0","rollup":"^0.36.0","rollup-plugin-uglify":"^1.0.1"},"scripts":{"test":"npm run build && mocha","coverage":"npm run build && istanbul cover _mocha","lint":"eslint parser.js test rollup.config.js rollup-min.config.js","build":"rollup -c rollup.config.js && rollup -c rollup-min.config.js","prepublish":"npm run build"},"files":["dist/"],"repository":{"type":"git","url":"git+https://github.com/silentmatt/expr-eval.git"},"keywords":["expression","math","evaluate","eval","function","parser"],"author":{"name":"Matthew Crumley"},"license":"MIT","bugs":{"url":"https://github.com/silentmatt/expr-eval/issues"},"homepage":"https://github.com/silentmatt/expr-eval#readme","gitHead":"e765b0d170512b8c0289c8dae09227969c9ee1f4","_id":"expr-eval@1.0.0-rc.4","_shasum":"0d74752fbe65a24481c0d1cce7e6cdfa6d4e4101","_from":".","_npmVersion":"3.5.2","_nodeVersion":"4.2.6","_npmUser":{"name":"silentmatt","email":"email@matthewcrumley.com"},"dist":{"shasum":"0d74752fbe65a24481c0d1cce7e6cdfa6d4e4101","tarball":"https://registry.npmjs.org/expr-eval/-/expr-eval-1.0.0-rc.4.tgz","integrity":"sha512-8gtf7/kJM7WEBowgblg0q6Ej9CuIuwCB+FYT4cZEVKaHT/e2xAFzYlNGDpL9EObSS8HvL7wChU2PWorCOocSqw==","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIQDoxU4LkCh8Xmi4hKJOkDz5dcqn4H6AxmBgG8mT9ulgugIgcjKFjeA+6dINBWgH1RTYhNkAuNfNooDnGdM1rtA8nes="}]},"maintainers":[{"name":"silentmatt","email":"email@matthewcrumley.com"}],"_npmOperationalInternal":{"host":"packages-18-east.internal.npmjs.com","tmp":"tmp/expr-eval-1.0.0-rc.4.tgz_1483036227211_0.7925026642624289"}},"1.0.0":{"name":"expr-eval","version":"1.0.0","description":"Mathematical expression evaluator","main":"dist/bundle.js","directories":{"test":"test"},"dependencies":{},"devDependencies":{"chai":"^3.5.0","eslint":"^3.4.0","eslint-config-semistandard":"^7.0.0-beta.0","eslint-config-standard":"^6.0.0","eslint-plugin-promise":"^3.3.1","eslint-plugin-standard":"^2.0.0","istanbul":"^0.4.5","mocha":"^3.1.0","rollup":"^0.36.0","rollup-plugin-uglify":"^1.0.1"},"scripts":{"test":"npm run build && mocha","coverage":"npm run build && istanbul cover _mocha","lint":"eslint parser.js test rollup.config.js rollup-min.config.js","build":"rollup -c rollup.config.js && rollup -c rollup-min.config.js","prepublish":"npm run build"},"files":["dist/"],"repository":{"type":"git","url":"git+https://github.com/silentmatt/expr-eval.git"},"keywords":["expression","math","evaluate","eval","function","parser"],"author":{"name":"Matthew Crumley"},"license":"MIT","bugs":{"url":"https://github.com/silentmatt/expr-eval/issues"},"homepage":"https://github.com/silentmatt/expr-eval#readme","gitHead":"fb3b840b409e3db6f7e9335a6431a1338a1fca5e","_id":"expr-eval@1.0.0","_shasum":"0a5ef2cd7d0d745c3a490d2cf53bca3400b2965d","_from":".","_npmVersion":"3.10.8","_nodeVersion":"6.9.1","_npmUser":{"name":"silentmatt","email":"email@matthewcrumley.com"},"dist":{"shasum":"0a5ef2cd7d0d745c3a490d2cf53bca3400b2965d","tarball":"https://registry.npmjs.org/expr-eval/-/expr-eval-1.0.0.tgz","integrity":"sha512-u4xJDnUy+kO/uzr72LsG+d0qCWLlvlOCWoEUHLB5jGovLiUn79+RE9mkBo3wxG9mv/wNTFNrzbeSOE1JQWGcrg==","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEYCIQDIwP7BYfhsDVIZ02fbE6Et+QcLc4LoppnZB5K1nw1q/wIhANVdtqoFCQDpkFbkpBCbh/7tp0hysXqlCpg/Nhdn6oYD"}]},"maintainers":[{"name":"silentmatt","email":"email@matthewcrumley.com"}],"_npmOperationalInternal":{"host":"packages-18-east.internal.npmjs.com","tmp":"tmp/expr-eval-1.0.0.tgz_1483386831169_0.6428212849423289"}},"1.0.1":{"name":"expr-eval","version":"1.0.1","description":"Mathematical expression evaluator","main":"dist/bundle.js","directories":{"test":"test"},"dependencies":{},"devDependencies":{"chai":"^3.5.0","eslint":"^3.4.0","eslint-config-semistandard":"^7.0.0-beta.0","eslint-config-standard":"^6.0.0","eslint-plugin-promise":"^3.3.1","eslint-plugin-standard":"^2.0.0","istanbul":"^0.4.5","mocha":"^3.1.0","rollup":"^0.36.0","rollup-plugin-uglify":"^1.0.1"},"scripts":{"test":"npm run build && mocha","coverage":"npm run build && istanbul cover _mocha","lint":"eslint parser.js test rollup.config.js rollup-min.config.js","build":"rollup -c rollup.config.js && rollup -c rollup-min.config.js","prepublish":"npm run build"},"files":["dist/"],"repository":{"type":"git","url":"git+https://github.com/silentmatt/expr-eval.git"},"keywords":["expression","math","evaluate","eval","function","parser"],"author":{"name":"Matthew Crumley"},"license":"MIT","bugs":{"url":"https://github.com/silentmatt/expr-eval/issues"},"homepage":"https://github.com/silentmatt/expr-eval#readme","gitHead":"b7d35ecebe8fe134d40dc07bed4805578985dcac","_id":"expr-eval@1.0.1","_shasum":"ba6b4296617dc3535046cf82f5d01fb3e474b163","_from":".","_npmVersion":"3.10.8","_nodeVersion":"6.9.1","_npmUser":{"name":"silentmatt","email":"email@matthewcrumley.com"},"dist":{"shasum":"ba6b4296617dc3535046cf82f5d01fb3e474b163","tarball":"https://registry.npmjs.org/expr-eval/-/expr-eval-1.0.1.tgz","integrity":"sha512-NwfJukBBycJqQDeHw8Qoyky27kilmiaAP/4mE29Rvmm6NhRwRyUvdEkGgzrtB7bFWr0hzDVoXILsNdIVOze0zw==","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEQCIHisKAIEC2THpPq+dHbgkgUQT4IP5tKMl3gmfzsx6xs5AiAdWBYF7b5GXvy7d7sEUOrs1rKiey/7dZalRZqWhK5UDA=="}]},"maintainers":[{"name":"silentmatt","email":"email@matthewcrumley.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/expr-eval-1.0.1.tgz_1497135667014_0.6566164984833449"}},"1.1.0":{"name":"expr-eval","version":"1.1.0","description":"Mathematical expression evaluator","main":"dist/bundle.js","typings":"parser.d.ts","directories":{"test":"test"},"dependencies":{},"devDependencies":{"chai":"^4.1.1","eslint":"^4.5.0","eslint-config-semistandard":"^11.0.0","eslint-config-standard":"^10.2.1","eslint-plugin-import":"^2.7.0","eslint-plugin-node":"^5.1.1","eslint-plugin-promise":"^3.5.0","eslint-plugin-standard":"^3.0.1","istanbul":"^0.4.5","mocha":"^3.5.0","rollup":"^0.49.2","rollup-plugin-uglify":"^2.0.1"},"scripts":{"test":"npm run build && mocha","coverage":"npm run build && istanbul cover _mocha","lint":"eslint index.js src test rollup.config.js rollup-min.config.js","build":"rollup -c rollup.config.js && rollup -c rollup-min.config.js","prepublish":"npm run build"},"files":["dist/"],"repository":{"type":"git","url":"git+https://github.com/silentmatt/expr-eval.git"},"keywords":["expression","math","evaluate","eval","function","parser"],"author":{"name":"Matthew Crumley"},"license":"MIT","bugs":{"url":"https://github.com/silentmatt/expr-eval/issues"},"homepage":"https://github.com/silentmatt/expr-eval#readme","gitHead":"3c3fe07bfe33e371a259626ce8366b4e22a61f38","_id":"expr-eval@1.1.0","_shasum":"8ce6f7c0ff4ee559c375d903a12bb564f77c0278","_from":".","_npmVersion":"3.10.10","_nodeVersion":"6.11.2","_npmUser":{"name":"silentmatt","email":"email@matthewcrumley.com"},"dist":{"shasum":"8ce6f7c0ff4ee559c375d903a12bb564f77c0278","tarball":"https://registry.npmjs.org/expr-eval/-/expr-eval-1.1.0.tgz","integrity":"sha512-tCLSWWVSrV+ni124/PMN85z1bl7XGSSAT3/JPoyfI+8f4hAXlFIvlLR0LVH082q6CoI3KVSvmnZqFTBLcHELkw==","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIEPGpTa7/bXjtJ/zId7mYXpzI5xhkfdwzFmnpW5vzvWgAiEAx9DgAojTxevTBToMK98gx3udKnW2dINCNDFLYFJdJFo="}]},"maintainers":[{"name":"silentmatt","email":"email@matthewcrumley.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/expr-eval-1.1.0.tgz_1504058937892_0.885403414722532"}},"1.1.1":{"name":"expr-eval","version":"1.1.1","description":"Mathematical expression evaluator","main":"dist/bundle.js","typings":"parser.d.ts","directories":{"test":"test"},"dependencies":{},"devDependencies":{"chai":"^4.1.1","eslint":"^4.5.0","eslint-config-semistandard":"^11.0.0","eslint-config-standard":"^10.2.1","eslint-plugin-import":"^2.7.0","eslint-plugin-node":"^5.1.1","eslint-plugin-promise":"^3.5.0","eslint-plugin-standard":"^3.0.1","istanbul":"^0.4.5","mocha":"^3.5.0","rollup":"^0.49.2","rollup-plugin-uglify":"^2.0.1"},"scripts":{"test":"npm run build && mocha","coverage":"npm run build && istanbul cover _mocha","lint":"eslint index.js src test rollup.config.js rollup-min.config.js","build":"rollup -c rollup.config.js && rollup -c rollup-min.config.js","prepublish":"npm run build"},"files":["dist/"],"repository":{"type":"git","url":"git+https://github.com/silentmatt/expr-eval.git"},"keywords":["expression","math","evaluate","eval","function","parser"],"author":{"name":"Matthew Crumley"},"license":"MIT","bugs":{"url":"https://github.com/silentmatt/expr-eval/issues"},"homepage":"https://github.com/silentmatt/expr-eval#readme","gitHead":"d7f8884c1ae81f39b4b73cbbd3f27aed8d305a23","_id":"expr-eval@1.1.1","_shasum":"c7ffd7c7194cda3baf369591f4e8d4f7f9c0a0f0","_from":".","_npmVersion":"3.5.2","_nodeVersion":"4.2.6","_npmUser":{"name":"silentmatt","email":"email@matthewcrumley.com"},"dist":{"shasum":"c7ffd7c7194cda3baf369591f4e8d4f7f9c0a0f0","tarball":"https://registry.npmjs.org/expr-eval/-/expr-eval-1.1.1.tgz","integrity":"sha512-8gUmk6fXj9QPDJOzAwW2UIcyxsk8hi9htaMUuT25HAV4T7jp3MVXiEXPBjIcTSVZEwSWDFyzNFExy3yjkhsoCQ==","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIF5U8UzehvGKoKiU6V7YBnrWuNKIREEUvC7JIZ89J7HQAiEAhlFVew7d286XVC5hAQWfxOebtJC0ATKo5in/90rQc8M="}]},"maintainers":[{"name":"silentmatt","email":"email@matthewcrumley.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/expr-eval-1.1.1.tgz_1504719829924_0.8651555108372122"}},"1.2.0":{"name":"expr-eval","version":"1.2.0","description":"Mathematical expression evaluator","main":"dist/bundle.js","typings":"parser.d.ts","directories":{"test":"test"},"dependencies":{},"devDependencies":{"eslint":"^4.5.0","eslint-config-semistandard":"^11.0.0","eslint-config-standard":"^10.2.1","eslint-plugin-import":"^2.7.0","eslint-plugin-node":"^5.1.1","eslint-plugin-promise":"^3.5.0","eslint-plugin-standard":"^3.0.1","istanbul":"^0.4.5","mocha":"^3.5.0","rollup":"^0.50.0","rollup-plugin-uglify":"^2.0.1"},"scripts":{"test":"npm run build && mocha","coverage":"npm run build && istanbul cover _mocha","lint":"eslint index.js src test rollup.config.js rollup-min.config.js","build":"rollup -c rollup.config.js && rollup -c rollup-min.config.js","prepublish":"npm run build"},"files":["dist/"],"repository":{"type":"git","url":"git+https://github.com/silentmatt/expr-eval.git"},"keywords":["expression","math","evaluate","eval","function","parser"],"author":{"name":"Matthew Crumley"},"license":"MIT","bugs":{"url":"https://github.com/silentmatt/expr-eval/issues"},"homepage":"https://github.com/silentmatt/expr-eval#readme","gitHead":"d5cabd941eed44a229269859d795387a190628d3","_id":"expr-eval@1.2.0","_shasum":"9a9d7f6ba8d958d441df5a874a0eb9522fb10a7a","_from":".","_npmVersion":"3.5.2","_nodeVersion":"4.2.6","_npmUser":{"name":"silentmatt","email":"email@matthewcrumley.com"},"dist":{"shasum":"9a9d7f6ba8d958d441df5a874a0eb9522fb10a7a","tarball":"https://registry.npmjs.org/expr-eval/-/expr-eval-1.2.0.tgz","integrity":"sha512-c7mfyMWJwv9FJZuJSkJYgleoqZnhJLw1fCFh7PC9YX9E72B4uIXdJK8g8YL9Cx7euiv3wfL/VExwAnFSvDiLRA==","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIGBpm8RUUDRBGMXhrTEc4iW5fkas2SFu/tuG7kZqY6JgAiEAt9KsONsl2aFf6IkfDDHaoiFoQwbVMH3yyXa5IrQK/t0="}]},"maintainers":[{"name":"silentmatt","email":"email@matthewcrumley.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/expr-eval-1.2.0.tgz_1506364386237_0.37146755028516054"}},"1.2.1":{"name":"expr-eval","version":"1.2.1","description":"Mathematical expression evaluator","main":"dist/bundle.js","typings":"parser.d.ts","directories":{"test":"test"},"dependencies":{},"devDependencies":{"eslint":"^4.5.0","eslint-config-semistandard":"^11.0.0","eslint-config-standard":"^10.2.1","eslint-plugin-import":"^2.7.0","eslint-plugin-node":"^5.1.1","eslint-plugin-promise":"^3.5.0","eslint-plugin-standard":"^3.0.1","istanbul":"^0.4.5","mocha":"^3.5.0","rollup":"^0.50.0","rollup-plugin-uglify":"^2.0.1"},"scripts":{"test":"npm run build && mocha","coverage":"npm run build && istanbul cover _mocha","lint":"eslint index.js src test rollup.config.js rollup-min.config.js","build":"rollup -c rollup.config.js && rollup -c rollup-min.config.js","prepublish":"npm run build"},"files":["dist/","parser.d.ts"],"repository":{"type":"git","url":"git+https://github.com/silentmatt/expr-eval.git"},"keywords":["expression","math","evaluate","eval","function","parser"],"author":{"name":"Matthew Crumley"},"license":"MIT","bugs":{"url":"https://github.com/silentmatt/expr-eval/issues"},"homepage":"https://github.com/silentmatt/expr-eval#readme","gitHead":"ffecd28c13fb9e3e502f1d07fbfbb5f85acd1d5b","_id":"expr-eval@1.2.1","_shasum":"1425caf4d7ccb7439ce72d0488b20c3f6e4ea25a","_from":".","_npmVersion":"3.5.2","_nodeVersion":"4.2.6","_npmUser":{"name":"silentmatt","email":"email@matthewcrumley.com"},"dist":{"shasum":"1425caf4d7ccb7439ce72d0488b20c3f6e4ea25a","tarball":"https://registry.npmjs.org/expr-eval/-/expr-eval-1.2.1.tgz","integrity":"sha512-Q2yvByoq3gR5Lx/greBjgRU1JlTt4NpAlZ0soe7j+F1FRvcYN1IcpH+PGjAz5hcEx1I2YhNLfH+7Dz8a5eNA8w==","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIGYdCAQkK2wQTFg4AvbO1h9URIfYWttpyxOGOdTxpe/NAiEA53JMz3ixWgHrzntCimaH9aKeJ9xtnr6R5abhC6p+GJ0="}]},"maintainers":[{"name":"silentmatt","email":"email@matthewcrumley.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/expr-eval-1.2.1.tgz_1513892541307_0.6143889264203608"}},"1.2.2":{"name":"expr-eval","version":"1.2.2","description":"Mathematical expression evaluator","main":"dist/bundle.js","typings":"parser.d.ts","directories":{"test":"test"},"dependencies":{},"devDependencies":{"eslint":"^4.19.0","eslint-config-semistandard":"^12.0.1","eslint-config-standard":"^11.0.0","eslint-plugin-import":"^2.7.0","eslint-plugin-node":"^6.0.0","eslint-plugin-promise":"^3.5.0","eslint-plugin-standard":"^3.0.1","istanbul":"^0.4.5","mocha":"^5.0.0","rollup":"^0.62.0","rollup-plugin-uglify":"^3.0.0"},"scripts":{"test":"npm run build && mocha","coverage":"npm run build && istanbul cover _mocha","lint":"eslint index.js src test rollup.config.js rollup-min.config.js","build":"rollup -c rollup.config.js && rollup -c rollup-min.config.js","prepublish":"npm run build"},"files":["dist/","parser.d.ts"],"repository":{"type":"git","url":"git+https://github.com/silentmatt/expr-eval.git"},"keywords":["expression","math","evaluate","eval","function","parser"],"author":{"name":"Matthew Crumley"},"license":"MIT","bugs":{"url":"https://github.com/silentmatt/expr-eval/issues"},"homepage":"https://github.com/silentmatt/expr-eval#readme","gitHead":"debf3ec645c38b40d9fb8c40c5dd023572f91317","_id":"expr-eval@1.2.2","_shasum":"8b1a160b814e67da7652007e2693714895221ea0","_from":".","_npmVersion":"3.5.2","_nodeVersion":"4.2.6","_npmUser":{"name":"silentmatt","email":"email@matthewcrumley.com"},"dist":{"shasum":"8b1a160b814e67da7652007e2693714895221ea0","tarball":"https://registry.npmjs.org/expr-eval/-/expr-eval-1.2.2.tgz","fileCount":6,"unpackedSize":74513,"integrity":"sha512-ajWScpour9P4kitHpXRQlsP3eKy+CU5mN4UQoyLQ2SWrpXNNeVB0JHmCE4tis5FNUdZcEOz0oWsN+8S8HN+Nrg==","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIQCsjz/KfSBllZrAVKFkTMY1Dw5HZ41CDPnYOPKhxGZImwIgIx/FNmPbopdwIgvH1VM3wMWV81R+e0hMNKUuXT6iZXY="}]},"maintainers":[{"name":"silentmatt","email":"email@matthewcrumley.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/expr-eval_1.2.2_1530629734568_0.5636936246992217"},"_hasShrinkwrap":false},"1.2.3":{"name":"expr-eval","version":"1.2.3","description":"Mathematical expression evaluator","main":"dist/bundle.js","typings":"parser.d.ts","directories":{"test":"test"},"dependencies":{},"devDependencies":{"eslint":"^5.12.1","eslint-config-semistandard":"^13.0.0","eslint-config-standard":"^12.0.0","eslint-plugin-import":"^2.15.0","eslint-plugin-node":"^8.0.1","eslint-plugin-promise":"^4.0.1","eslint-plugin-standard":"^4.0.0","istanbul":"^0.4.5","mocha":"^5.0.0","rollup":"^0.63.0","rollup-plugin-uglify":"^3.0.0"},"scripts":{"test":"npm run build && mocha","coverage":"npm run build && istanbul cover _mocha","lint":"eslint index.js src test rollup.config.js rollup-min.config.js","build":"rollup -c rollup.config.js && rollup -c rollup-min.config.js","prepublish":"npm run build"},"repository":{"type":"git","url":"git+https://github.com/silentmatt/expr-eval.git"},"keywords":["expression","math","evaluate","eval","function","parser"],"author":{"name":"Matthew Crumley"},"license":"MIT","bugs":{"url":"https://github.com/silentmatt/expr-eval/issues"},"homepage":"https://github.com/silentmatt/expr-eval#readme","gitHead":"49a85eb189ff1e08f944486c4859aebc70edc201","_id":"expr-eval@1.2.3","_shasum":"d61b3ae6b753a56ce4d3eff3b72c7cbe19a80ca8","_from":".","_npmVersion":"3.5.2","_nodeVersion":"4.2.6","_npmUser":{"name":"silentmatt","email":"email@matthewcrumley.com"},"dist":{"shasum":"d61b3ae6b753a56ce4d3eff3b72c7cbe19a80ca8","tarball":"https://registry.npmjs.org/expr-eval/-/expr-eval-1.2.3.tgz","integrity":"sha512-HqfsCqw/ScM+CzJMfj2JYjiysgozJmDPDVax94T7o/yU7UwZ8icXAunNF23sOsd3CEf9Q4JdU8Vx6y7LIdGE0w==","fileCount":6,"unpackedSize":77282,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJdJe5tCRA9TVsSAnZWagAAXhoP/3FfKAkpFRt/kLTBv6or\nojCGo/BeC8AJNziEFSyTQohGcovfvO4NvdZAmYdQHR0LdcrMURrD75xWb0sN\nS5zqeS/BUuXEXjWVLIYB4dwjCjXlp6XYLpt4dPesjDUlG3FvNwntl9OW0p7G\nK0SQ6hZ0Zq15dfOZ40LaslDPXFSfMTzJ+3ZKnlFPRKTLFXK2FmnDXSZufjp+\nwm/ZKoLyse4AK/L15g9qDgycZ2hDwUo4EfhFLb3x9aW3GS9mNj0MLhiXlOjb\nOwUwhOOLuFaK93oX/Ed20lemayI4EIZ/ji3OvvgCsMg290y/EXIzkzM8mww/\nNvU3V1/Bhefbz3w1uyEWnBu/StbmHLx8DmAGph/k4CAiGRitel5AkJrYF/EY\njjSXE8U/TgHTDPi5IiucJR5+NmZOic3HJ+E/QK9XE6KRNg7L1owmwPYyoHnA\ncy89Pao18H7zomX4rtp+tEAknARfdCullPnjdsXsSTtREQnPtdLCNUzIx7eb\nkCDuzoaNoqLPDYQbxG3RiGsHlDt27hKEWDbH8O2Q3OGnl2DNJbHWsAnWdPXI\nO0Ui4j4l+MqeIBAkpB8orQMdVs2G4j77BYbBrYAF/msTdak9LNbOqlxdzN4n\nmO0ZRwIJ+3soVrU+r/7akkEPd0TJTiK17kXXnv7uyVbZsH92m1vLgeGDgKal\nINYh\r\n=wtRY\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEYCIQD9wM0Rklk5k45cCk+LwLqjesdOVTQ0fF8EnoJsgTu3cgIhANDjpH9rWPqywRQaMGB51HnQwnvb6XHCD5dx29k9ir6i"}]},"maintainers":[{"name":"silentmatt","email":"email@matthewcrumley.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/expr-eval_1.2.3_1562766957148_0.10908297276990409"},"_hasShrinkwrap":false},"2.0.0":{"name":"expr-eval","version":"2.0.0","description":"Mathematical expression evaluator","main":"dist/bundle.js","module":"dist/index.mjs","typings":"parser.d.ts","directories":{"test":"test"},"dependencies":{},"devDependencies":{"eslint":"^6.3.0","eslint-config-semistandard":"^15.0.0","eslint-config-standard":"^13.0.1","eslint-plugin-import":"^2.15.0","eslint-plugin-node":"^9.2.0","eslint-plugin-promise":"^4.0.1","eslint-plugin-standard":"^4.0.0","mocha":"^6.2.0","nyc":"^14.1.1","rollup":"^1.20.3","rollup-plugin-uglify":"^6.0.3"},"scripts":{"test":"npm run build && mocha","coverage":"npm run build && nyc --reporter=lcov --reporter=text-summary mocha","lint":"eslint index.js src test rollup.config.js rollup-min.config.js","watch":"rollup -c rollup.config.js -w","build":"rollup -c rollup.config.js && rollup -c rollup-min.config.js && rollup -c rollup-esm.config.js","prepublish":"npm run build"},"repository":{"type":"git","url":"git+https://github.com/silentmatt/expr-eval.git"},"keywords":["expression","math","evaluate","eval","function","parser"],"author":{"name":"Matthew Crumley"},"license":"MIT","bugs":{"url":"https://github.com/silentmatt/expr-eval/issues"},"homepage":"https://github.com/silentmatt/expr-eval#readme","gitHead":"32b7f9f2e9bb4f5dd551fbbb1a08cd2c84b39632","_id":"expr-eval@2.0.0","_nodeVersion":"12.9.1","_npmVersion":"6.10.2","dist":{"integrity":"sha512-1rQyCVyZNHi6Bs6r4hYpqVRzbY6aPSJ8NT1/mhaWomrLq+P8CspSE4XlOyJVFKL1owhxLmjyTn3mSDcEDULgjg==","shasum":"3d50058d8723f8f841d76d1378c001cf7ed26ae5","tarball":"https://registry.npmjs.org/expr-eval/-/expr-eval-2.0.0.tgz","fileCount":7,"unpackedSize":143924,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJddG2cCRA9TVsSAnZWagAAbIkP/jmQjWQFq0HmKxdjOKBL\nlImcFizAYQRlMxidq3Vo1/W10kTNu671TwIvby7mYZNj/Vbf+aJ/+k+hkjWN\nUHPtQnF4kbnWR/EVTRH2q2Ctg614XQJED7sB+vqN740s9abG4soYf9Wi22mO\nAOPlZ5LKTwNjWuoH+UgHE8hNdz+Om8amRXKdoJPnlwsgiNh4U3eA+aXNK0sN\nBcJBrVR5NQNyvPRR3lxPZxh9vDhwtZ8n/hRGX8LAznSXeGP8Iqyu0gGzAoi1\nS7NmE6DhqFp1oaKflk4uqY8gN5R5v8hNoXkEwXeF0zdrRjq9FAXXzC4/GUX7\nKQ9iXptloV8LelM7LH/jPXN7voyJFcAqrw+K8oYr6pX4sNYDDk7hu5E9GVmN\ndsilSZm8b/Gj5gExSI9FHNycstu2Q/NSF5FiaOZcmGQrDUrAWAqfjwttmues\ne1F/aIVjr9hEuenG33qcyGC3Z9AoQQcg5wuD8NwzPOF7bjhpoGyAN+ugfQvz\nwiX+uZdSKi5QUWMFmmnt2gtkQluzhuQOQ5EP0jifv3O7SpPEJAKR+ZgYBfsD\nuSLkV8GtqK9cCeLs74HTcch9+dGvWvdQA2AkGaiwrw8Q4B1jQxEXmDJtqH9i\nECF5x23vzLtW3BVBvTgJ4nkWnvU2rZTC8R39AUP1ljtp97TazEA1OTPFas2r\npAZk\r\n=yIRj\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIBDbgr/OtWKUwTucxQyi8qQheK8C1IQCwpm3Vxehx0iMAiEAgMcg6jN8ci/V3K9Jh/9PSKM3nyWLdE9oDnTY6jGT2vU="}]},"maintainers":[{"name":"silentmatt","email":"email@matthewcrumley.com"}],"_npmUser":{"name":"silentmatt","email":"email@matthewcrumley.com"},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/expr-eval_2.0.0_1567911323679_0.4248983078582784"},"_hasShrinkwrap":false},"2.0.1":{"name":"expr-eval","version":"2.0.1","description":"Mathematical expression evaluator","main":"dist/bundle.js","module":"dist/index.mjs","typings":"parser.d.ts","directories":{"test":"test"},"dependencies":{},"devDependencies":{"eslint":"^6.3.0","eslint-config-semistandard":"^15.0.0","eslint-config-standard":"^13.0.1","eslint-plugin-import":"^2.15.0","eslint-plugin-node":"^9.2.0","eslint-plugin-promise":"^4.0.1","eslint-plugin-standard":"^4.0.0","mocha":"^6.2.0","nyc":"^14.1.1","rollup":"^1.20.3","rollup-plugin-uglify":"^6.0.3"},"scripts":{"test":"npm run build && mocha","coverage":"npm run build && nyc --reporter=lcov --reporter=text-summary mocha","lint":"eslint index.js src test rollup.config.js rollup-min.config.js","watch":"rollup -c rollup.config.js -w","build":"rollup -c rollup.config.js && rollup -c rollup-min.config.js && rollup -c rollup-esm.config.js","prepublish":"npm run build"},"repository":{"type":"git","url":"git+https://github.com/silentmatt/expr-eval.git"},"keywords":["expression","math","evaluate","eval","function","parser"],"author":{"name":"Matthew Crumley"},"license":"MIT","bugs":{"url":"https://github.com/silentmatt/expr-eval/issues"},"homepage":"https://github.com/silentmatt/expr-eval#readme","gitHead":"a7c241c0f875570a3ac9da52abf278a9cdd3fb53","_id":"expr-eval@2.0.1","_shasum":"eda69f0950064185ca6199f150254cae0d3f3d84","_from":".","_npmVersion":"3.10.10","_nodeVersion":"6.11.0","_npmUser":{"name":"silentmatt","email":"email@matthewcrumley.com"},"dist":{"shasum":"eda69f0950064185ca6199f150254cae0d3f3d84","tarball":"https://registry.npmjs.org/expr-eval/-/expr-eval-2.0.1.tgz","integrity":"sha512-8RqKOoWUmMB1/UlQmiFnUTt/Esp177dSm/ATIff/w0M+PHK3uO+PBwC2+Q8mLyS9sYSRznlBTRl6D6iyUvtSTQ==","fileCount":8,"unpackedSize":145235,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJdd/TrCRA9TVsSAnZWagAA+UwP/2jMVjVqOkdye8Qal/MP\nL4uEdPvNVp7LtmI/dK6T7w9VSmNsMw/Wxt6Y073I5059hU/lzWmTK+1ORu2m\ntPbgPDOLYP+d6i1DCZfH+ScMjb5/VJsJ45pTV2OXmlQNTRP98V8FvbFM/1VV\n4ZdTGyshVXWVGqKvdVIFw6TbvjrhfZEv+uF4Vdudp/K2d6UUh1ihfeM1E7Mr\nNRTAC2PReqga/NW974ATkwI92Ky2o4/fEQcg4Q5FhvpIZmNfDkxqDkp8R431\nDgdx5VCKewhQxLE/+3oEhqpIGoLf0r1qrdjz1GYIQLDMZGbXjQqMseDJezci\nVaM5EsExGrGYJf1H9wCernlfW57dHfhvWIFToaS4UJA1zJg0wMQsBYRY1Gyu\nX2F6bQumdMkUenvz4ODs4U/2Dxv8sWeCqLq4+UELN4Z2cvPC2Tro52O7vWLB\ndlCPTPQVHFy56yVr9s4gh41TCEUZCnZoAzmVWzMXYALRVmuuVxBIWi854Dmu\nTE9E+mrg7pFLCD5qhITALVBB7dxI1qZGhnnH6GfueyO8Gg+2w6gWtKMBNO6R\nWXwufAAFJ8Yk7oMpqJToBrRPuUVPi8H3NOG90FF4pwlzJlQQ+TraxHMRerk+\n5zc7oY1bGX+cNNU9ERTxEV81uDtubBVeONCQDEVicq93hdSL4qOaT7S0t6bT\nG0o6\r\n=9V/p\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIQDH7Qytc9wh3gajzllMf7ekVXu6Yq8K/niCeHmnwXHwswIgZQaY1wh+8eBrqhbjy9tt+n3C8GexOUgJbDPYB5ozwNw="}]},"maintainers":[{"name":"silentmatt","email":"email@matthewcrumley.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/expr-eval_2.0.1_1568142568568_0.9311185467447243"},"_hasShrinkwrap":false},"2.0.2":{"name":"expr-eval","version":"2.0.2","description":"Mathematical expression evaluator","main":"dist/bundle.js","module":"dist/index.mjs","typings":"parser.d.ts","directories":{"test":"test"},"dependencies":{},"devDependencies":{"eslint":"^6.3.0","eslint-config-semistandard":"^15.0.0","eslint-config-standard":"^13.0.1","eslint-plugin-import":"^2.15.0","eslint-plugin-node":"^9.2.0","eslint-plugin-promise":"^4.0.1","eslint-plugin-standard":"^4.0.0","mocha":"^6.2.0","nyc":"^14.1.1","rollup":"^1.20.3","rollup-plugin-uglify":"^6.0.3"},"scripts":{"test":"npm run build && mocha","coverage":"npm run build && nyc --reporter=lcov --reporter=text-summary mocha","lint":"eslint index.js src test rollup.config.js rollup-min.config.js","watch":"rollup -c rollup.config.js -w","build":"rollup -c rollup.config.js && rollup -c rollup-min.config.js && rollup -c rollup-esm.config.js","prepublish":"npm run build"},"repository":{"type":"git","url":"git+https://github.com/silentmatt/expr-eval.git"},"keywords":["expression","math","evaluate","eval","function","parser"],"author":{"name":"Matthew Crumley"},"license":"MIT","bugs":{"url":"https://github.com/silentmatt/expr-eval/issues"},"homepage":"https://github.com/silentmatt/expr-eval#readme","gitHead":"b4cf0607cc640ed69c34bd40a2aa6cdf283c1189","_id":"expr-eval@2.0.2","_nodeVersion":"12.9.1","_npmVersion":"6.10.2","dist":{"integrity":"sha512-4EMSHGOPSwAfBiibw3ndnP0AvjDWLsMvGOvWEZ2F96IGk0bIVdjQisOHxReSkE13mHcfbuCiXw+G4y0zv6N8Eg==","shasum":"fa6f044a7b0c93fde830954eb9c5b0f7fbc7e201","tarball":"https://registry.npmjs.org/expr-eval/-/expr-eval-2.0.2.tgz","fileCount":8,"unpackedSize":145577,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJdj8/4CRA9TVsSAnZWagAA4m8P/2Ni2uAHU6QwAj09SHW/\nzs2r2spcAurZJuzu/ImOcZt316ipcc9T48kaVBT0FgVYBQgtoFmtUvVYhqm6\n45AA5H0Q8RQ7RqRgbVzNZYFSOg8HUmJCuC0xcPGYeMS9xjMdzFM6ciVYQSQ3\nlOkIvzmeskCNVECII1QhOVNUNBdLxtva0kG9iSYRw5zv9xiq1AwW0ooRQqbO\nHdM2/U6ndXqHuGa3ruSdbcOVEP/zcfOVtSSIXWjug24gKG8/wyGjEYq90qJx\n9j83VN8rZORlnuzfK5+lCl2qe0SuSGRh5bS4KpibcYvRW9UZYGOVQ6tJdeoq\no5fv/vvHHpvV3GNcb5lL/BTbH7miP6EyGCoFYsnxlTqvTCfCTL/Gd1zetRSL\n62EPHEWt2CjaCPHqirSkJw/N1zhnuImzXsK+BCvrnY0br/lONxG2OOlwyJfO\nR80YMG/DXjoygpTLT+rB5EzAZbfG/S67fH1lEL8RCcLwahIZdMtXm8yY21Fn\n+cND6Mc82ZXXbssWHAt17Rlp6KQM8rDSoAiY+z+CzVsFL9rJHAl3HxpVDcvg\n9IvWz0f06HKXIU8xxWe6f8xjvunD+AtSpaEvgGsX5zAixT2uskhDpvO+TlBM\nwubN5//l66HfvQpYrlcCajOUbKrn72U3AwUtT1Epi//JiKt7QstxecI8LxDT\nlcp5\r\n=8p1k\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEQCIE+4xmLkL1ob8EStGtiS/U6dxdL6pRDNfyPGMdCtvl2wAiBny4OR2O/VLe2mdZpdytGGfB5IB2C+NhEzElFnDl8pig=="}]},"maintainers":[{"name":"silentmatt","email":"email@matthewcrumley.com"}],"_npmUser":{"name":"silentmatt","email":"email@matthewcrumley.com"},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/expr-eval_2.0.2_1569705975905_0.06431243506867701"},"_hasShrinkwrap":false}},"readme":"JavaScript Expression Evaluator\n===============================\n\n[![npm](https://img.shields.io/npm/v/expr-eval.svg?maxAge=3600)](https://www.npmjs.com/package/expr-eval)\n[![CDNJS version](https://img.shields.io/cdnjs/v/expr-eval.svg?maxAge=3600)](https://cdnjs.com/libraries/expr-eval)\n[![Build Status](https://travis-ci.org/silentmatt/expr-eval.svg?branch=master)](https://travis-ci.org/silentmatt/expr-eval)\n\nDescription\n-------------------------------------\n\nParses and evaluates mathematical expressions. It's a safer and more\nmath-oriented alternative to using JavaScript’s `eval` function for mathematical\nexpressions.\n\nIt has built-in support for common math operators and functions. Additionally,\nyou can add your own JavaScript functions. Expressions can be evaluated\ndirectly, or compiled into native JavaScript functions.\n\nInstallation\n-------------------------------------\n\n    npm install expr-eval\n\nBasic Usage\n-------------------------------------\n\n    var Parser = require('expr-eval').Parser;\n\n    var parser = new Parser();\n    var expr = parser.parse('2 * x + 1');\n    console.log(expr.evaluate({ x: 3 })); // 7\n\n    // or\n    Parser.evaluate('6 * x', { x: 7 }) // 42\n\nDocumentation\n-------------------------------------\n\n* [Parser](#parser)\n    - [Parser()](#parser-1)\n    - [parse(expression: string)](#parseexpression-string)\n    - [Parser.parse(expression: string)](#parserparseexpression-string)\n    - [Parser.evaluate(expression: string, variables?: object)](#parserevaluateexpression-string-variables-object)\n* [Expression](#expression)\n    - [evaluate(variables?: object)](#evaluatevariables-object)\n    - [substitute(variable: string, expression: Expression | string | number)](#substitutevariable-string-expression-expression--string--number)\n    - [simplify(variables: object)](#simplifyvariables-object)\n    - [variables(options?: object)](#variablesoptions-object)\n    - [symbols(options?: object)](#symbolsoptions-object)\n    - [toString()](#tostring)\n    - [toJSFunction(parameters: array | string, variables?: object)](#tojsfunctionparameters-array--string-variables-object)\n* [Expression Syntax](#expression-syntax)\n    - [Operator Precedence](#operator-precedence)\n    - [Unary operators](#unary-operators)\n    - [Array literals](#array-literals)\n    - [Pre-defined functions](#pre-defined-functions)\n    - [Custom JavaScript functions](#custom-javascript-functions)\n    - [Constants](#constants)\n\n### Parser ###\n\nParser is the main class in the library. It has as single `parse` method, and\n\"static\" methods for parsing and evaluating expressions.\n\n#### Parser()\n\nConstructs a new `Parser` instance.\n\nThe constructor takes an optional `options` parameter that allows you to enable or disable operators.\n\nFor example, the following will create a `Parser` that does not allow comparison or logical operators, but does allow `in`:\n\n    var parser = new Parser({\n      operators: {\n        // These default to true, but are included to be explicit\n        add: true,\n        concatenate: true,\n        conditional: true,\n        divide: true,\n        factorial: true,\n        multiply: true,\n        power: true,\n        remainder: true,\n        subtract: true,\n\n        // Disable and, or, not, <, ==, !=, etc.\n        logical: false,\n        comparison: false,\n\n        // Disable 'in' and = operators\n        'in': false,\n        assignment: false\n      }\n    });\n\n#### parse(expression: string)\n\nConvert a mathematical expression into an `Expression` object.\n\n#### Parser.parse(expression: string)\n\nStatic equivalent of `new Parser().parse(expression)`.\n\n#### Parser.evaluate(expression: string, variables?: object)\n\nParse and immediately evaluate an expression using the values and functions from\nthe `variables` object.\n\nParser.evaluate(expr, vars) is equivalent to calling\nParser.parse(expr).evaluate(vars).\n\n### Expression ###\n\n`Parser.parse(str)` returns an `Expression` object. `Expression`s are similar to\nJavaScript functions, i.e. they can be \"called\" with variables bound to\npassed-in values. In fact, they can even be converted into JavaScript\nfunctions.\n\n#### evaluate(variables?: object)\n\nEvaluate the expression, with variables bound to the values in {variables}. Each\nvariable in the expression is bound to the corresponding member of the\n`variables` object. If there are unbound variables, `evaluate` will throw an\nexception.\n\n    js> expr = Parser.parse(\"2 ^ x\");\n    (2^x)\n    js> expr.evaluate({ x: 3 });\n    8\n\n#### substitute(variable: string, expression: Expression | string | number)\n\nCreate a new `Expression` with the specified variable replaced with another\nexpression. This is similar to function composition. If `expression` is a string\nor number, it will be parsed into an `Expression`.\n\n    js> expr = Parser.parse(\"2 * x + 1\");\n    ((2*x)+1)\n    js> expr.substitute(\"x\", \"4 * x\");\n    ((2*(4*x))+1)\n    js> expr2.evaluate({ x: 3 });\n    25\n\n#### simplify(variables: object)\n\nSimplify constant sub-expressions and replace variable references with literal\nvalues. This is basically a partial evaluation, that does as much of the\ncalculation as it can with the provided variables. Function calls are not\nevaluated (except the built-in operator functions), since they may not be\ndeterministic.\n\nSimplify is pretty simple. For example, it doesn’t know that addition and\nmultiplication are associative, so `((2*(4*x))+1)` from the previous example\ncannot be simplified unless you provide a value for x. `2*4*x+1` can however,\nbecause it’s parsed as `(((2*4)*x)+1)`, so the `(2*4)` sub-expression will be\nreplaced with \"8\", resulting in `((8*x)+1)`.\n\n    js> expr = Parser.parse(\"x * (y * atan(1))\").simplify({ y: 4 });\n    (x*3.141592653589793)\n    js> expr.evaluate({ x: 2 });\n    6.283185307179586\n\n#### variables(options?: object)\n\nGet an array of the unbound variables in the expression.\n\n    js> expr = Parser.parse(\"x * (y * atan(1))\");\n    (x*(y*atan(1)))\n    js> expr.variables();\n    x,y\n    js> expr.simplify({ y: 4 }).variables();\n    x\n\nBy default, `variables` will return \"top-level\" objects, so for example, `Parser.parse(x.y.z).variables()` returns `['x']`. If you want to get the whole chain of object members, you can call it with `{ withMembers: true }`. So `Parser.parse(x.y.z).variables({ withMembers: true })` would return `['x.y.z']`.\n\n#### symbols(options?: object)\n\nGet an array of variables, including any built-in functions used in the\nexpression.\n\n    js> expr = Parser.parse(\"min(x, y, z)\");\n    (min(x, y, z))\n    js> expr.symbols();\n    min,x,y,z\n    js> expr.simplify({ y: 4, z: 5 }).symbols();\n    min,x\n\nLike `variables`, `symbols` accepts an option argument `{ withMembers: true }` to include object members.\n\n#### toString()\n\nConvert the expression to a string. `toString()` surrounds every sub-expression\nwith parentheses (except literal values, variables, and function calls), so\nit’s useful for debugging precedence errors.\n\n#### toJSFunction(parameters: array | string, variables?: object)\n\nConvert an `Expression` object into a callable JavaScript function. `parameters`\nis an array of parameter names, or a string, with the names separated by commas.\n\nIf the optional `variables` argument is provided, the expression will be\nsimplified with variables bound to the supplied values.\n\n    js> expr = Parser.parse(\"x + y + z\");\n    ((x + y) + z)\n    js> f = expr.toJSFunction(\"x,y,z\");\n    [Function] // function (x, y, z) { return x + y + z; };\n    js> f(1, 2, 3)\n    6\n    js> f = expr.toJSFunction(\"y,z\", { x: 100 });\n    [Function] // function (y, z) { return 100 + y + z; };\n    js> f(2, 3)\n    105\n\n### Expression Syntax ###\n\nThe parser accepts a pretty basic grammar. It's similar to normal JavaScript\nexpressions, but is more math-oriented. For example, the `^` operator is\nexponentiation, not xor.\n\n#### Operator Precedence\n\nOperator                 | Associativity | Description\n:----------------------- | :------------ | :----------\n(...)                    | None          | Grouping\nf(), x.y, a[i]           | Left          | Function call, property access, array indexing\n!                        | Left          | Factorial\n^                        | Right         | Exponentiation\n+, -, not, sqrt, etc.    | Right         | Unary prefix operators (see below for the full list)\n\\*, /, %                 | Left          | Multiplication, division, remainder\n+, -, \\|\\|               | Left          | Addition, subtraction, array/list concatenation\n==, !=, >=, <=, >, <, in | Left          | Equals, not equals, etc. \"in\" means \"is the left operand included in the right array operand?\"\nand                      | Left          | Logical AND\nor                       | Left          | Logical OR\nx ? y : z                | Right         | Ternary conditional (if x then y else z)\n=                        | Right         | Variable assignment\n;                        | Left          | Expression separator\n\n    var parser = new Parser({\n      operators: {\n        'in': true,\n        'assignment': true\n      }\n    });\n    // Now parser supports 'x in array' and 'y = 2*x' expressions\n\n#### Unary operators\n\nThe parser has several built-in \"functions\" that are actually unary operators.\nThe primary difference between these and functions are that they can only accept\nexactly one argument, and parentheses are optional. With parentheses, they have\nthe same precedence as function calls, but without parentheses, they keep their\nnormal precedence (just below `^`). For example, `sin(x)^2` is equivalent to\n`(sin x)^2`, and `sin x^2` is equivalent to `sin(x^2)`.\n\nThe unary `+` and `-` operators are an exception, and always have their normal\nprecedence.\n\nOperator | Description\n:------- | :----------\n-x       | Negation\n+x       | Unary plus. This converts it's operand to a number, but has no other effect.\nx!       | Factorial (x * (x-1) * (x-2) * … * 2 * 1). gamma(x + 1) for non-integers.\nabs x    | Absolute value (magnitude) of x\nacos x   | Arc cosine of x (in radians)\nacosh x  | Hyperbolic arc cosine of x (in radians)\nasin x   | Arc sine of x (in radians)\nasinh x  | Hyperbolic arc sine of x (in radians)\natan x   | Arc tangent of x (in radians)\natanh x  | Hyperbolic arc tangent of x (in radians)\ncbrt x   | Cube root of x\nceil x   | Ceiling of x — the smallest integer that’s >= x\ncos x    | Cosine of x (x is in radians)\ncosh x   | Hyperbolic cosine of x (x is in radians)\nexp x    | e^x (exponential/antilogarithm function with base e)\nexpm1 x  | e^x - 1\nfloor x  | Floor of x — the largest integer that’s <= x\nlength x | String length of x\nln x     | Natural logarithm of x\nlog x    | Natural logarithm of x (synonym for ln, not base-10)\nlog10 x  | Base-10 logarithm of x\nlog2 x   | Base-2 logarithm of x\nlog1p x  | Natural logarithm of (1 + x)\nnot x    | Logical NOT operator\nround x  | X, rounded to the nearest integer, using \"grade-school rounding\"\nsign x   | Sign of x (-1, 0, or 1 for negative, zero, or positive respectively)\nsin x    | Sine of x (x is in radians)\nsinh x   | Hyperbolic sine of x (x is in radians)\nsqrt x   | Square root of x. Result is NaN (Not a Number) if x is negative.\ntan x    | Tangent of x (x is in radians)\ntanh x   | Hyperbolic tangent of x (x is in radians)\ntrunc x  | Integral part of a X, looks like floor(x) unless for negative number\n\n#### Pre-defined functions\n\nBesides the \"operator\" functions, there are several pre-defined functions. You\ncan provide your own, by binding variables to normal JavaScript functions.\nThese are not evaluated by simplify.\n\nFunction      | Description\n:------------ | :----------\nrandom(n)     | Get a random number in the range [0, n). If n is zero, or not provided, it defaults to 1.\nfac(n)        | n! (factorial of n: \"n * (n-1) * (n-2) * … * 2 * 1\") Deprecated. Use the ! operator instead.\nmin(a,b,…)    | Get the smallest (minimum) number in the list.\nmax(a,b,…)    | Get the largest (maximum) number in the list.\nhypot(a,b)    | Hypotenuse, i.e. the square root of the sum of squares of its arguments.\npyt(a, b)     | Alias for hypot.\npow(x, y)     | Equivalent to x^y. For consistency with JavaScript's Math object.\natan2(y, x)   | Arc tangent of x/y. i.e. the angle between (0, 0) and (x, y) in radians.\nroundTo(x, n) | Rounds x to n places after the decimal point.\nmap(f, a)     | Array map: Pass each element of `a` the function `f`, and return an array of the results.\nfold(f, y, a) | Array fold: Fold/reduce array `a` into a single value, `y` by setting `y = f(y, x, index)` for each element `x` of the array.\nfilter(f, a)  | Array filter: Return an array containing only the values from `a` where `f(x, index)` is `true`.\nindexOf(x, a) | Return the first index of string or array `a` matching the value `x`, or `-1` if not found.\njoin(sep, a)  | Concatenate the elements of `a`, separated by `sep`.\nif(c, a, b)   | Function form of c ? a : b. Note: This always evaluates both `a` and `b`, regardless of whether `c` is `true` or not. Use `c ? a : b` instead if there are side effects, or if evaluating the branches could be expensive.\n\n#### Array literals\n\nArrays can be created by including the elements inside square `[]` brackets, separated by commas. For example:\n\n    [ 1, 2, 3, 2+2, 10/2, 3! ]\n\n#### Function definitions\n\nYou can define functions using the syntax `name(params) = expression`. When it's evaluated, the name will be added to the passed in scope as a function. You can call it later in the expression, or make it available to other expressions by re-using the same scope object. Functions can support multiple parameters, separated by commas.\n\nExamples:\n\n    square(x) = x*x\n    add(a, b) = a + b\n    factorial(x) = x < 2 ? 1 : x * factorial(x - 1)\n\n#### Custom JavaScript functions\n\nIf you need additional functions that aren't supported out of the box, you can easily add them in your own code. Instances of the `Parser` class have a property called `functions` that's simply an object with all the functions that are in scope. You can add, replace, or delete any of the properties to customize what's available in the expressions. For example:\n\n    var parser = new Parser();\n\n    // Add a new function\n    parser.functions.customAddFunction = function (arg1, arg2) {\n      return arg1 + arg2;\n    };\n\n    // Remove the factorial function\n    delete parser.functions.fac;\n\n    parser.evaluate('customAddFunction(2, 4) == 6'); // true\n    //parser.evaluate('fac(3)'); // This will fail\n\n#### Constants\n\nThe parser also includes a number of pre-defined constants that can be used in expressions. These are shown\nin the table below:\n\nConstant     | Description\n:----------- | :----------\nE            | The value of `Math.E` from your JavaScript runtime\nPI           | The value of `Math.PI` from your JavaScript runtime\ntrue         | Logical `true` value\nfalse        | Logical `false` value\n\nPre-defined constants are stored in `parser.consts`. You can make changes to this property to customise the\nconstants available to your expressions. For example:\n\n    var parser = new Parser();\n    parser.consts.R = 1.234;\n\n    console.log(parser.parse('A+B/R').toString());  // ((A + B) / 1.234)\n\nTo disable the pre-defined constants, you can replace or delete `parser.consts`:\n\n    var parser = new Parser();\n    parser.consts = {};\n\n\n### Tests ###\n\n1. `cd` to the project directory\n2. Install development dependencies: `npm install`\n3. Run the tests: `npm test`\n","maintainers":[{"name":"silentmatt","email":"email@matthewcrumley.com"}],"time":{"modified":"2022-06-17T22:06:18.921Z","created":"2016-09-14T03:34:04.382Z","0.9.0":"2016-09-14T03:34:04.382Z","0.10.0":"2016-09-29T04:53:19.367Z","0.10.1":"2016-10-02T21:24:12.519Z","0.12.0":"2016-10-13T05:43:33.534Z","1.0.0-rc.3":"2016-11-28T20:46:45.344Z","1.0.0-rc.4":"2016-12-29T18:30:27.905Z","1.0.0":"2017-01-02T19:53:51.868Z","1.0.1":"2017-06-10T23:01:08.863Z","1.1.0":"2017-08-30T02:08:58.995Z","1.1.1":"2017-09-06T17:43:51.210Z","1.2.0":"2017-09-25T18:33:07.523Z","1.2.1":"2017-12-21T21:42:22.282Z","1.2.2":"2018-07-03T14:55:34.665Z","1.2.3":"2019-07-10T13:55:57.291Z","2.0.0":"2019-09-08T02:55:23.813Z","2.0.1":"2019-09-10T19:09:28.701Z","2.0.2":"2019-09-28T21:26:16.055Z"},"homepage":"https://github.com/silentmatt/expr-eval#readme","keywords":["expression","math","evaluate","eval","function","parser"],"repository":{"type":"git","url":"git+https://github.com/silentmatt/expr-eval.git"},"author":{"name":"Matthew Crumley"},"bugs":{"url":"https://github.com/silentmatt/expr-eval/issues"},"license":"MIT","readmeFilename":"README.md","users":{"silentmatt":true,"garipov":true}}